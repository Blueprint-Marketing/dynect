{"name":"dynect","tagline":"Dynect API connector for node.js","body":"Dynect API connector for node.js.\r\n===\r\n\r\nthe node.js Dynect module provides a simple interface for making calls to the Dynect API.\r\n\r\nit is a work in progress and further functionality and examples will be provided soon.\r\n\r\ncontributions are welcome of course.\r\n\r\n### example 1 :\r\n \r\nadd A record www.example.com (address '123.45.67.89')\r\n\r\n``` js\r\n\tvar Dynect = require('dynect');\r\n\r\n\t// open Dynect API session\r\n\tvar dynect = new Dynect('customername', 'username', 'password');\r\n\r\n\tdynect.on('connected', function () {\r\n\t\tvar zone = 'example.com';\r\n\r\n\t\t// add A record with 5 min TTL\r\n\t\tdynect.addRecord('A', zone, 'www.example.com', {\r\n\t\t\taddress: '123.45.67.89'\r\n\t\t}, 300, function (addResponse) {\r\n\t\t\tconsole.log(addResponse);\r\n\r\n\t\t\t//publish zone\r\n\t\t\tdynect.publishZone(zone, function (publishResponse) {\r\n\t\t\t\tconsole.log(publishResponse);\r\n\r\n\t\t\t\t// close Dynect API session\r\n\t\t\t\tdynect.disconnect();\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tdynect.connect();\r\n```\r\n\r\n### example 2 : \r\n\r\nadd CNAME record www.example.com (cname 'example.mydomain.com')\r\n\r\n``` js\r\n\tvar Dynect = require('dynect');\r\n\r\n\t// open Dynect API session and send keepalive every 5mins\r\n\tvar dynect = new Dynect('customername', 'username', 'password', 300000);\r\n\r\n\tdynect.on('connected', function () {\r\n\t\tvar zone = 'example.com';\r\n\r\n\t\t// add CNAME record with default TTL\r\n\t\tdynect.addRecord('CNAME', zone, 'www.example.com', {\r\n\t\t\tcname: 'example.mydomain.com'\r\n\t\t}, 0, function (addResponse) {\r\n\t\t\tconsole.log(addResponse);\r\n\r\n\t\t\t// publish zone\r\n\t\t\tdynect.publishZone(zone, function (publishResponse) {\r\n\t\t\t\tconsole.log(publishResponse);\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tdynect.connect();\r\n```\r\n\r\n### example 3 : \r\n\r\nget all SRV records for '_sip._tcp.example.com' and remove any record with matching target 'voip.mydomain.com'\r\n\r\n``` js\r\n\tvar Dynect = require('dynect');\r\n\r\n\t// open Dynect API session\r\n\tvar dynect = new Dynect('customername', 'username', 'password');\r\n\tvar zone = 'example.com';\r\n\r\n\tdynect.on('connected', function () {\r\n\t\tvar fqdn = '_sip._tcp.example.com';\r\n\r\n\t\tdynect.getRecordSet('SRV', zone, fqdn, function (response) {\r\n\t\t\tconsole.log(response);\r\n\r\n\t\t\tif (response.status === 'failure' && response.msgs[0].ERR_CD === 'NOT_FOUND') {\r\n\t\t\t\t// SRV records not found\r\n\r\n\t\t\t\t// close Dynect API session\r\n\t\t\t\tdynect.disconnect();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// SRV records found\r\n\r\n\t\t\t\tvar uri = response.data[0];\r\n\t\t\t\tvar parts = uri.split('/');\r\n\t\t\t\tvar recordId = parts[parts.length - 1];\r\n\r\n\t\t\t\tremoveTargetIfExists(fqdn, recordId, 'voip.mydomain.com', function (isRemoved) {\r\n\t\t\t\t\tconsole.log(isRemoved ? 'removed' : 'nothing removed')\r\n\r\n\t\t\t\t\t// close Dynect API session\r\n\t\t\t\t\tdynect.disconnect();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tfunction removeTargetIfExists(fqdn, recordId, target, callback) {\r\n\t\tdynect.getRecord('SRV', zone, fqdn, recordId, function (response) {\r\n\t\t\tif (response.data.rdata.target === target + '.') {\r\n\t\t\t\t// SRV record for target exists so remove\r\n\r\n\t\t\t\tdynect.removeRecord('SRV', zone, fqdn, recordId, function () {\r\n\t\t\t\t\tcallback(true);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// SRV record for target does not exist\r\n\r\n\t\t\t\tcallback(false);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tdynect.connect();\r\n```\r\n\r\n## installation\r\n\r\n```\r\n  npm install dynect\r\n```\r\n\r\n## enjoy\r\n\r\n#### the [frisB.com](http://www.frisb.com) team :)","google":"UA-40562957-1","note":"Don't delete this file! It's used internally to help with page regeneration."}